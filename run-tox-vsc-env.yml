parameters:
  jobs:
    py39:
    py36:
    py27:
  tox_version: "tox"
  coverage:
    with_toxenv: ""
    for_envs: []
  dependsOn: []
  vsc_requires: []

jobs:
  - ${{ each job in parameters.jobs }}:
      - job: ${{ coalesce(job.value.name, job.key) }}
        dependsOn: ${{ coalesce(job.value.dependsOn, parameters.dependsOn) }}

        pool:
          vmImage: "ubuntu-latest"

        variables:
          TMPDIR: $(Agent.TempDirectory)
          PIP_NO_WARN_SCRIPT_LOCATION: "0"
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
          PYTHONWARNINGS: "ignore:::pip._internal.cli.base_command"
          TOXENV: ${{ coalesce(job.value.toxenv, job.key) }}

          # having extra VSC packages moves the source directory into its own sub-folder
          # if length 'vsc_requires' > 0, overwrite global TOXDIR variable
          ${{ if contains(join('*', parameters.vsc_requires), '*') }}:
            TOXDIR: $(Build.SourcesDirectory)/$(Build.Repository.Name)
          ${{ if not(contains(join('*', parameters.vsc_requires), '*')) }}:
            TOXDIR: $(Build.SourcesDirectory)

        steps:
          # checkout with submodules please
          - checkout: self
            displayName: checkout source code (with submodules)
            submodules: true

          # load tox
          - task: UsePythonVersion@0
            displayName: "tox: get python"
            inputs:
              versionSpec: "3.8"
              addToPath: false
            name: toxPython

          - script: $(toxPython.pythonLocation)/python -m pip install -U --user pip wheel
            displayName: "tox: upgrade pip"

          - ${{ if parameters.tox_version }}:
              - script:
                  ${{ format(
                    '$(toxPython.pythonLocation)/python -m pip install -U --user --force-reinstall {0}',
                    parameters.tox_version
                  ) }}
                displayName: "${{ format('tox: install {0} from PyPI', parameters.tox_version) }}"
          - ${{ if not(parameters.tox_version) }}:
              - script: $(toxPython.pythonLocation)/python -m pip install -U --user --force-reinstall . -v
                displayName: "tox: install inline"

          # acquire target test Python
          - ? ${{ if or(eq(job.key, 'py39'), startsWith(job.key, 'py39-'), eq(job.key, 'py38'), startsWith(job.key,
              'py38-'), eq(job.key, 'py37'), startsWith(job.key, 'py37-'), eq(job.key, 'py36'), startsWith(job.key,
              'py36-'), eq(job.key, 'py35'), startsWith(job.key, 'py35-'), eq(job.key, 'py34'), startsWith(job.key,
              'py34-'), eq(job.key, 'py27'), startsWith(job.key, 'py27-'), eq(job.key, 'pypy'), startsWith(job.key,
              'pypy-'), eq(job.key, 'pypy3'), startsWith(job.key, 'pypy3-'), eq(job.value.py, '2.7'), eq(job.value.py,
              '3.4'), eq(job.value.py, '3.5'), eq(job.value.py, '3.6'), eq(job.value.py, '3.7'), eq(job.value.py,
              'pypy2'), eq(job.value.py, 'pypy3')) }}
            : - task: UsePythonVersion@0
                displayName: "${{ format('provision target test python {0}', job.key) }}"
                inputs:
                  ${{ if job.value.py }}:
                    versionSpec: ${{ job.value.py }}
                  ${{ if not(job.value.py) }}:
                    ${{ if or(eq(job.key, 'py27'), startsWith(job.key, 'py27-')) }}:
                      versionSpec: "2.7"
                    ${{ if or(eq(job.key, 'py34'), startsWith(job.key, 'py34-')) }}:
                      versionSpec: "3.4"
                    ${{ if or(eq(job.key, 'py35'), startsWith(job.key, 'py35-')) }}:
                      versionSpec: "3.5"
                    ${{ if or(eq(job.key, 'py36'), startsWith(job.key, 'py36-')) }}:
                      versionSpec: "3.6"
                    ${{ if or(eq(job.key, 'py37'), startsWith(job.key, 'py37-')) }}:
                      versionSpec: "3.7"
                    ${{ if or(eq(job.key, 'py38'), startsWith(job.key, 'py38-')) }}:
                      versionSpec: "3.8"
                    ${{ if or(eq(job.key, 'py39'), startsWith(job.key, 'py39-')) }}:
                      versionSpec: "3.9"
                    ${{ if or(eq(job.key, 'pypy'), startsWith(job.key, 'pypy-')) }}:
                      versionSpec: "pypy2"
                    ${{ if or(eq(job.key, 'pypy3'), startsWith(job.key, 'pypy3-')) }}:
                      versionSpec: "pypy3"
                  architecture: ${{ coalesce(job.value.architecture, 'x64') }}

          - ${{ if or(eq(job.key, 'py310'), startsWith(job.key, 'py310-')) }}:
              - script: |
                  sudo add-apt-repository ppa:deadsnakes
                  sudo apt-get update
                  sudo apt-get install -y --no-install-recommends python3.10-dev python3.10-venv python3.10-distutils
                displayName: "provision python 3.10"

          - ${{ if or(eq(job.key, 'jython'), startsWith(job.key, 'jython-')) }}:
              - script:
                  wget
                  http://search.maven.org/remotecontent?filepath=org/python/jython-installer/2.7.2/jython-installer-2.7.2.jar
                  -O $(Agent.ToolsDirectory)/jython.jar
                displayName: "download jython"
              - script: java -jar $(Agent.ToolsDirectory)/jython.jar -sd $(Agent.ToolsDirectory)/jython -e demo src doc
                displayName: "install jython"
              - script: echo "##vso[task.setvariable variable=PATH]$(Agent.ToolsDirectory)/jython/bin:$(PATH)"
                displayName: "add to PATH jython"
              - script: jython -c "import sys; print(sys.version_info); print(sys.platform)"
                displayName: "show jython information"

          # allow user to run global before
          - ${{ if parameters.before }}:
              - ${{ parameters.before }}

          # allow user to run per job setup
          - ${{ if job.value.before }}:
              - ${{ job.value.before }}

          - script: >
              python -c "import sys; import os; print('\n'.join(os.environ['PATH'].split(os.pathsep)));
              print(sys.version); print(sys.executable);"
            displayName: "show python information"

          - script: $(toxPython.pythonLocation)/python -m tox -av
            displayName: "tox: provision and show envs"
            workingDirectory: $(TOXDIR)

          # run tests
          - script: $(toxPython.pythonLocation)/python -m tox --notest -vv --skip-missing-interpreters false
            displayName: "tox: generate test environment"
            workingDirectory: $(TOXDIR)

          # install VSC required packages inside tox environment
          - ${{ if parameters.vsc_requires }}:
              - script: |
                  python_toxenv="$(TOXDIR)/.tox/${{ job.key }}/bin/python"
                  $python_toxenv -m pip install wheel vsc-install
                displayName: "vsc: install vsc-install"
                env:
                  PYTHON_HOME: ""
                  VIRTUAL_ENV: ${{ job.key }}
              - ${{ each vscpkg in parameters.vsc_requires }}:
                  - checkout: ${{ vscpkg }}
                    displayName: "${{ format('vsc: clone {0}', vscpkg) }}"
                  - script: |
                      python_toxenv="$(TOXDIR)/.tox/${{ job.key }}/bin/python"
                       $python_toxenv -m pip install $(Build.SourcesDirectory)/${{ vscpkg }}
                    displayName: "${{ format('vsc: install {0}', vscpkg) }}"
                    env:
                      PYTHON_HOME: ""
                      VIRTUAL_ENV: ${{ job.key }}

          - script: $(toxPython.pythonLocation)/python -m tox
            displayName: "tox: run test environment"
            workingDirectory: $(TOXDIR)

          # upload junit result if present
          - bash:
              'printf "##vso[task.setVariable variable=junit]" && ([ -f junit.$(TOXENV).xml ] && printf yes || printf
              no) && echo ""'
            displayName: "check if junit file present"
            condition: always()
            workingDirectory: $(TOXDIR)/.tox

          - task: PublishTestResults@2
            displayName: "publish test results via junit"
            condition: eq(variables.junit, 'yes')
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "$(TOXDIR)/.tox/junit.$(TOXENV).xml"
              testRunTitle: "junit-$(Agent.OS)-$(Agent.OSArchitecture)-$(TOXENV)"

          # upload coverage artifacts if present
          - ${{ if and(parameters.coverage.with_toxenv, containsValue(parameters.coverage.for_envs, job.key)) }}:
              - script:
                  ${{ format(
                    '$(toxPython.pythonLocation)/python -m tox -e {0} --skip-missing-interpreters false',
                    parameters.coverage.with_toxenv
                  ) }}
                displayName: "create coverage report"
                workingDirectory: $(TOXDIR)
              - task: CopyFiles@2
                displayName: "move coverage files into staging area"
                inputs:
                  sourceFolder: $(TOXDIR)/.tox
                  contents: |
                    .coverage
                    coverage.xml
                  targetFolder: $(Build.StagingDirectory)
              - task: PublishBuildArtifacts@1
                displayName: "publish coverage file"
                inputs:
                  pathtoPublish: $(Build.ArtifactStagingDirectory)
                  ArtifactName: "coverage-$(Agent.OS)-$(Agent.OSArchitecture)-$(TOXENV)"

          - ${{ if job.value.after }}:
              - ${{ job.value.after }}

  - ${{ if and(parameters.coverage.with_toxenv, parameters.coverage.for_envs) }}:
      - template: merge-coverage.yml
        parameters:
          tox_version: ${{ parameters.tox_version }}
          toxenv: ${{ parameters.coverage.with_toxenv }}
          dependsOn: ${{ parameters.coverage.for_envs }}
